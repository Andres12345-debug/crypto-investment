###### Creamos el proyecto ######

    nest new citas_backend
    nest new back_repositorio

        nest new backend-crypto-investment

###### installacion de paquetes #######
    npm i sharp 
    npm i expres 
    npm i typeorm
    npm i @nestjs/config
    npm i @nestjs/typeorm 
    npm i typeorm-naming-strategies 
    npm install bcryptjs
    npm i formidable
    npm install jsonwebtoken
    npm install pg --save
    npm i @types/express --save-dev
    npm i @types/bcryptjs --save-dev
    npm i @types/formidable --save-dev
    npm i @types/jsonwebtoken --save-dev

Consumo api
npm install dotenv
Axiosnpm install axios


Instalar mysql
npm install mysql2 typeorm typeorm-naming-strategies


#### privados  ######
    nest g mo modulos/privado

    nest g mo modulos/privado/usuarios
    nest g s modulos/privado/usuarios --no-spec
    nest g co modulos/privado/usuarios --no-spec

### SERVICIOS ###

    nest g mo modulos
    nest g mo modulos/coinmarketcap
    nest g s modulos/coinmarketcap --no-spec
    nest g co modulos/coinmarketcap --no-spec

#### Creamos config/conexión ### 

nest g module config/conexion
            
        @Global()
        @Module({
        imports: [],
        providers: [
            {
            provide: DataSource,
            inject: [],
            useFactory: async () => {
                try {
                const poolConexion = new DataSource({
                    type: 'postgres',
                    host: String(process.env.HOST),
                    port: Number(process.env.PORT),
                    username: String(process.env.USER),
                    password: String(process.env.CLAVE),
                    database: String(process.env.BASE_DATOS),
                    synchronize: true,
                    logging: true,
                    namingStrategy: new SnakeNamingStrategy(),
                    entities: [Acceso, Publicacion, Rol, Usuario], // Aquí debes agregar tus entidades
                });

                await poolConexion.initialize();
                console.log("Conexión a la base de datos exitosa."+String(process.env.DATA_BASE));

                return poolConexion;
                } catch (miError) {
                console.log("Falló al realizar la conexión");
                throw miError;
                }
            },
            },
        ],
        exports: [DataSource],
        })
        export class 
        ConexionModule {}

###### CREACION DE LOS MODELOS #######
   	nest g cl modelos/cryptocurrencies --no-spec
    nest g cl modelos/historial_precios --no-spec

#### Middleware #####
    nest g cl middleware/seguridad/seguridad --no-spec

    Se crea el seguridad ts y se agregar
            import { Injectable, NestMiddleware } from '@nestjs/common';
            import { verify } from 'jsonwebtoken';
            import { NextFunction ,Request, Response} from 'express';

            @Injectable()
            export class Seguridad implements NestMiddleware {
                public use(req: Request, res: Response, next: NextFunction){
                if(!req.headers.authorization){
                res.status(401).json({respuesta:"Peticion negada por el sistema de seguridad"});
            }else{
                try {
                    const token = req.headers.authorization;
                    const datosSesion = verify(token, 'laClaveSecreta');
                    if (req.method!='PUT'){
                        req.body.datosUsuario = datosSesion;
                    }
                    next();
                } catch (miError) {
                    res.status(500).json({mensaje:"Intento de fraude"});

                }
            }
            }}

### Se configura tambien el app.module ###
Para que conozca el .env
  imports: [ConfigModule.forRoot({isGlobal: true,envFilePath:".env"}), ConexionModule],

  Middleware      
    export class AppModule implements NestModule{
      public configure(consumer: MiddlewareConsumer) {

      consumer.apply(Seguridad).forRoutes({path: '/privado/*', method: RequestMethod.ALL});
      
        }
      }

### Arreglamos el Main.ts ###
        
	async function bootstrap() {
        const puerto=Number(process.env.PUERTO_SERVIDOR);

        const app = await NestFactory.create(AppModule);
        app.enableCors();
        await app.listen(puerto,()=>{
            console.log(`Servidor funcionando puerto: `+puerto);
        });
        }
        bootstrap();


### Al empezar para las rutas del privado y publico ###
Para el routes Privado

const routes: Routes = [
    {
      path: 'privado',
      children: [UsuariosModule, PublicoModule, RolesModule, PublicacionesModule, ImagenesModule],
    },
  ];

Para el routes Publico
const routes: Routes = [
    {
      path: 'publico',
      children: [UsuariosModule, RegistrosModule],
    },
  ];


REGISTER va si o si, tanto para privado como publico
@Module({
  imports: [
    UsuariosModule, 
    MateriasModule,
    RouterModule.register(routes),

  ],
  exports: [RouterModule],
})

### Ejecutar proyecto ###
nest start --watch


